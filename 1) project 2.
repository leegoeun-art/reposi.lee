#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include "ascii_art.h"

int main11(void)
{
    int pic_num, pic_height = 0, pic_width = 0;
    int steps_to_downwards, steps_to_rightwards;
    char* ascii_array = NULL;
    int y1 = 0, y2 = 0;      //여러 변수들을 선언합니다. pic_num, pic_height, pic_width는 그림의 번호와 높이, 너비를 저장하는 변수입니다. 
                                steps_to_downwards, steps_to_rightwards는 아래로 몇 줄, 오른쪽으로 몇 칸 이동할지를 저장하는 변수입니다. 
                                ascii_array는 선택한 그림의 ASCII 아트를 가리키는 포인터입니다. 
                                char* ascii_array = NULL;는 포인터 변수 ascii_array를 선언하고, 초기값으로 NULL을 할당하는 코드입니다
                                char*: 포인터 변수의 자료형을 나타냅니다. char 포인터는 문자열이나 문자 배열을 가리키는 데 사용됩니다.
                                ascii_array: 변수의 이름입니다. 이 변수는 ASCII 아트의 문자열을 가리킬 것입니다.
                                = NULL: 포인터 변수를 초기화합니다. NULL은 포인터 변수가 아무것도 가리키지 않도록 하는 값으로 사용됩니다.
                                y1과 y2는 반복문에서 사용되는 변수입니다.//

    while (1)
    {
        printf("그림 번호 선택(1.main, 2.flower, 3.castle, 기타: 종료): ");
        scanf("%d", &pic_num);    > 무한 루프를 실행하며 사용자에게 그림 번호를 선택하라고 입력을 받습니다. pic_num 변수에 사용자의 입력을 저장합니다.

        switch (pic_num) {
        case 1:
            ascii_array = ascii_main[0];
            pic_width = 46;
            pic_height = 9;
            break;

        case 2:
            ascii_array = ascii_flower[0];
            pic_width = 18;
            pic_height = 13;
            break;

        case 3:
            ascii_array = ascii_castle[0];
            pic_width = 57;
            pic_height = 20;
            break;

        default:
            printf("안녕히 가세요.\n");
            return 0;
           
        }
        printf("오른쪽으로 몇 칸 이동할까요? ");
        scanf("%d", &steps_to_rightwards);

        printf("아래로 몇 줄 이동할까요? ");
        scanf("%d", &steps_to_downwards);

        printf("선택한 그림을 해당 위치로부터 출력합니다.\n");
        for (int y1 = 0, y2 = 0; y1 < pic_height + steps_to_downwards; y1++)    
        
                          > int y1 = 0, y2 = 0;: y1과 y2를 각각 0으로 초기화합니다. 이는 반복문에 진입하기 전에 초기값을 설정하는 부분입니다.
                                y1 < pic_height + steps_to_downwards;: 반복문의 조건을 나타내며, y1이 pic_height + steps_to_downwards보다 작을 때까지 반복합니다.
                                y1++: 각 반복이 끝날 때마다 y1을 1씩 증가시킵니다.
        {
            if (y1 >= steps_to_downwards)
            {
                for (int x = 0; x < steps_to_rightwards; x++)       
                    printf(" ");

                /*for (int x=0; x<pic_width; x++)
                  printf("%c", *(ascii_array +(y2 * pic_width)+x));
                printf("\n");*/

                printf("%s\n", ascii_array + (y2 * pic_width));
                y2++;
            }
            else printf("\n");
        }
        return 0;
    }
}
여러 변수들을 선언합니다. pic_num, pic_height, pic_width는 그림의 번호와 높이, 너비를 저장하는 변수입니다. 
steps_to_downwards, steps_to_rightwards는 아래로 몇 줄, 오른쪽으로 몇 칸 이동할지를 저장하는 변수입니다. 
ascii_array는 선택한 그림의 ASCII 아트를 가리키는 포인터입니다. 
y1과 y2는 반복문에서 사용되는 변수입니다.






하트모양의 아스키 코드 출력.

#include <stdio.h>

int main(void) {
    printf("   ***   ***\n");
    printf(" ***** *****\n");
    printf("*************\n");
    printf(" ***********\n");
    printf("  *********\n");
    printf("   *******\n");
    printf("    *****\n");
    printf("     ***\n");
    printf("      *\n");

    return 0;
}

로켓

#include <stdio.h>

int main(void) {
    printf("       _\n");
    printf("     /^\\\n");
    printf("    /   \\\n");
    printf("   /_____\\\n");
    printf("   |  |  |\n");
    printf("   |  |  |\n");
    printf("   |__|__|\n");
    printf("  /       \\\n");
    printf(" /         \\\n");
    printf("/___________\\\n");
    printf("|    |    |\n");
    printf("|____|____|\n");

    return 0;
}

사용자로부터 입력을 받아 원하는 크기와 너비로 별 모양을 출력하는 C 프로그램의 예제입니다. 
사용자에게 원하는 행 수와 각 행의 별 개수를 입력받아 해당 크기의 삼각형을 출력합니다.
#include <stdio.h>

int main(void) {
    int rows, width;

    // 사용자로부터 행 수 입력 받기
    printf("삼각형의 행 수를 입력하세요: ");
    scanf("%d", &rows);

    // 사용자로부터 각 행의 별 개수 입력 받기
    printf("각 행의 별 개수를 입력하세요: ");
    scanf("%d", &width);

    // 별 모양 출력
    for (int i = 1; i <= rows; i++) {
        for (int j = 1; j <= width; j++) {
            printf("*");
        }
        printf("\n");
        width++;
    }

    return 0;
}

[random]
물론이죠! 다음은 좀 더 어렵고 복잡한 문제 예시입니다. 이 문제는 좀 더 고급 프로그래밍 기술이 필요한 그래픽 효과를 구현하는 데 초점을 맞추었습니다.

문제: ASCII 아트 애니메이션
주어진 C 코드에서 ASCII 아트를 선택한 위치로부터 이동하여 출력하는 프로그램을 더 발전시켜, 아트가 움직이는 애니메이션 효과를 구현하세요. 다음과 같은 요구사항을 만족시켜야 합니다:

선택한 ASCII 아트가 주어진 방향과 속도로 이동하며, 이동한 후 화면에 출력되어야 합니다.
프로그램은 일정한 주기로 반복하여 애니메이션 효과를 제공해야 합니다.
사용자는 애니메이션을 중지하거나 다른 아트를 선택하여 새로운 애니메이션을 시작할 수 있어야 합니다.
사용자 입력 및 동작에 대한 적절한 오류 처리를 구현하세요.
추가 기능:
사용자에게 이동 방향과 속도를 입력 받아야 합니다.
애니메이션을 중지하고 새로운 아트를 선택하거나 프로그램을 종료할 수 있는 옵션을 제공하세요.
사용자 정의 아트를 추가하고, 선택할 수 있도록 하세요.
이러한 추가된 조건을 충족시키면서 프로그램을 개선하세요. 이 문제는 프로그래밍 논리와 사용자 상호작용에 대한 고급 이해를 요구합니다.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define _CRT_SECURE_NO_WARNINGS

// 아트 배열 및 크기 정의 (예시로 2개의 아트를 추가)
char ascii_main[9][46] = { /* ... */ };
char ascii_flower[13][18] = { /* ... */ };
char ascii_custom[10][20] = { /* ... */ };

// 함수 프로토타입 선언
void displayArt(char *art[], int height, int width, int x, int y);
void clearScreen();

int main(void) {
    int pic_num, pic_height = 0, pic_width = 0;
    int steps_to_downwards, steps_to_rightwards;
    char *ascii_array = NULL;
    int y1 = 0, y2 = 0;

    int direction, speed;
    int continue_animation = 1;

    while (continue_animation) {
        // 아트 선택 및 크기 설정
        // ... (이전 코드와 동일)

        // 사용자에게 이동 방향과 속도 입력 받기
        printf("이동 방향을 선택하세요 (1: 오른쪽, 2: 왼쪽, 3: 위쪽, 4: 아래쪽): ");
        scanf("%d", &direction);
        printf("이동 속도를 선택하세요 (1: 느림, 2: 보통, 3: 빠름): ");
        scanf("%d", &speed);

        // 애니메이션 효과 구현
        while (1) {
            clearScreen();
            
            // 아트 이동 및 출력
            displayArt(ascii_array, pic_height, pic_width, y1, y2);

            // 이동 방향에 따라 좌표 조정
            switch (direction) {
                case 1: // 오른쪽
                    y2 += speed;
                    break;
                case 2: // 왼쪽
                    y2 -= speed;
                    break;
                case 3: // 위쪽
                    y1 -= speed;
                    break;
                case 4: // 아래쪽
                    y1 += speed;
                    break;
                default:
                    break;
            }

            usleep(50000); // 50ms 대기

            // 사용자에게 계속할 지 여부 확인
            printf("계속 애니메이션을 진행하려면 1, 종료하려면 0을 입력하세요: ");
            scanf("%d", &continue_animation);
            if (!continue_animation) {
                break;
            }
        }
    }

    printf("프로그램을 종료합니다.\n");
    return 0;
}

// 화면을 지우는 함수 (Linux 및 macOS에서만 동작)
void clearScreen() {
    printf("\033[H\033[J");
}

// 아트를 화면에 출력하는 함수
void displayArt(char *art[], int height, int width, int x, int y) {
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < y; j++) {
            printf(" ");
        }

        if (i + x >= 0) {
            printf("%.*s\n", width, art[i + x]);
        } else {
            printf("\n");
        }
    }
}

==================================================
[자연수 a,b 사이의 구간에 대해서 홀수는 더하고
짝수는 빼는 식을 보여준 후 결과를 출력하시오 ex) a=5,b=10인 경우, 5-6+7-8+9-10=-3]

def calculate_expression(a, b):
    result = 0
    for i in range(a, b + 1):
        result += (-1) ** (i + 1) * i
    return result

a = 5
b = 10
result = calculate_expression(a, b)
print(f"{a}-{b}까지의 결과: {result}")


====================================================
문제: 그림 비교 및 변환
두 개의 ASCII 아트가 주어졌을 때, 두 그림이 얼마나 유사한지를 판단하고, 
유사하다면 한 그림을 다른 그림으로 변환하는 프로그램을 작성하세요. 다음과 같은 요구사항을 만족시켜야 합니다:

사용자에게 두 그림을 선택하도록 하세요.
선택한 두 그림이 얼마나 유사한지 판단하는 기준을 정하세요. (예: 픽셀 일치, 유사도 측정 등)
유사한 정도에 따라 두 그림을 변환하세요. (예: 픽셀 값을 조정하여 유사도 증가)
변환된 그림을 화면에 출력하세요.
프로그램은 계속해서 다른 그림을 선택하거나 종료할 수 있어야 합니다.
이 문제는 두 그림 간의 비교와 변환, 사용자 상호작용 등을 다루는데 도전적일 수 있습니다. 
이런 유형의 문제를 해결하면서 문자열 처리, 알고리즘 설계, 사용자 인터페이스 구현 등의 다양한 프로그래밍 개념을 익힐 수 있습니다.
#include <stdio.h>
#include <stdlib.h>

#define _CRT_SECURE_NO_WARNINGS

char ascii_art1[5][10] = {
    "*********",
    "*********",
    "*********",
    "*********",
    "*********"
};

char ascii_art2[5][10] = {
    "#########",
    "#########",
    "#########",
    "#########",
    "#########"
};

void displayArt(char *art[], int height) {
    for (int i = 0; i < height; i++) {
        printf("%s\n", art[i]);
    }
}

int compareArt(char *art1[], char *art2[], int height) {
    int similarity = 0;
    for (int i = 0; i < height; i++) {
        for (int j = 0; art1[i][j] != '\0'; j++) {
            if (art1[i][j] == art2[i][j]) {
                similarity++;
            }
        }
    }
    return similarity;
}

void transformArt(char *art[], int height) {
    for (int i = 0; i < height; i++) {
        for (int j = 0; art[i][j] != '\0'; j++) {
            if (art[i][j] == '*') {
                art[i][j] = '#';
            }
        }
    }
}

int main(void) {
    int choice;
    int similarity;

    while (1) {
        printf("그림을 선택하세요 (1 또는 2, 0: 종료): ");
        scanf("%d", &choice);

        if (choice == 0) {
            break;
        }

        char **selected_art = (choice == 1) ? ascii_art1 : ascii_art2;

        printf("\n선택한 그림:\n");
        displayArt(selected_art, 5);

        similarity = compareArt(ascii_art1, ascii_art2, 5);
        printf("\n그림 유사도: %d\n", similarity);

        if (similarity > 0) {
            printf("그림을 변환합니다...\n");
            transformArt(selected_art, 5);
            displayArt(selected_art, 5);
        }
    }

    printf("프로그램을 종료합니다.\n");
    return 0;
}

문제: 파일 압축 및 해제
주어진 파일을 압축하고, 압축된 파일을 다시 해제하는 간단한 파일 압축 프로그램을 작성하세요. 
다음과 같은 요구사항을 만족시켜야 합니다:

사용자에게 파일명을 입력받아 해당 파일을 읽고, 지정된 형식으로 압축하세요.
압축된 파일은 새로운 파일로 저장되어야 합니다.
사용자가 압축된 파일을 선택하면 원본 파일로 해제하세요.
프로그램은 계속해서 다른 파일을 압축하거나 해제할 수 있어야 합니다.
파일 형식과 압축 알고리즘은 자유롭게 선택하세요 (예: 간단한 RLE 알고리즘 사용).
이 문제는 파일 입출력, 문자열 처리, 알고리즘 디자인에 대한 이해를 검증하는 데 사용될 수 있습니다. 
사용자 인터페이스 및 파일 시스템 상호작용도 포함됩니다

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void compressFile(const char *inputFileName, const char *outputFileName) {
    FILE *inputFile = fopen(inputFileName, "r");
    FILE *outputFile = fopen(outputFileName, "w");

    if (inputFile == NULL || outputFile == NULL) {
        perror("파일 열기 오류");
        return;
    }

    char currentChar, prevChar;
    int count = 1;

    while ((currentChar = fgetc(inputFile)) != EOF) {
        if (currentChar == prevChar) {
            count++;
        } else {
            if (count > 1) {
                fprintf(outputFile, "%d%c", count, prevChar);
            } else {
                fputc(prevChar, outputFile);
            }
            count = 1;
        }

        prevChar = currentChar;
    }

    fclose(inputFile);
    fclose(outputFile);

    printf("파일이 압축되었습니다.\n");
}

void decompressFile(const char *inputFileName, const char *outputFileName) {
    FILE *inputFile = fopen(inputFileName, "r");
    FILE *outputFile = fopen(outputFileName, "w");

    if (inputFile == NULL || outputFile == NULL) {
        perror("파일 열기 오류");
        return;
    }

    char currentChar;
    int count = 0;

    while ((currentChar = fgetc(inputFile)) != EOF) {
        if (isdigit(currentChar)) {
            count = count * 10 + (currentChar - '0');
        } else {
            for (int i = 0; i < count; i++) {
                fputc(currentChar, outputFile);
            }
            count = 0;
        }
    }

    fclose(inputFile);
    fclose(outputFile);

    printf("파일이 해제되었습니다.\n");
}

int main(void) {
    int choice;
    char inputFileName[256];
    char outputFileName[256];

    while (1) {
        printf("1. 파일 압축\n2. 파일 해제\n0. 종료\n");
        printf("원하는 작업을 선택하세요: ");
        scanf("%d", &choice);

        if (choice == 0) {
            break;
        }

        printf("입력 파일명: ");
        scanf("%s", inputFileName);
        printf("출력 파일명: ");
        scanf("%s", outputFileName);

        if (choice == 1) {
            compressFile(inputFileName, outputFileName);
        } else if (choice == 2) {
            decompressFile(inputFileName, out



물론이죠! 다음은 조금 더 복잡한 데이터 구조와 알고리즘을 활용하는 문제입니다:

문제: 그래프 탐색 - 단일 출발점 최단 경로
주어진 방향 그래프에서 하나의 출발점에서 다른 모든 정점까지의 최단 경로를 찾는 프로그램을 작성하세요. 다음과 같은 요구사항을 만족시켜야 합니다:

사용자에게 정점의 수와 간선 정보를 입력 받으세요.
그래프는 인접 행렬 또는 인접 리스트를 사용하여 표현하세요.
선택한 출발점에서 다른 모든 정점까지의 최단 경로를 찾아 출력하세요. (예: Dijkstra 알고리즘 사용)
프로그램은 계속해서 다른 그래프를 입력하거나 종료할 수 있어야 합니다.
이 문제는 그래프 알고리즘에 대한 이해와 구현력을 향상시키는 데 도움이 됩니다. Dijkstra 알고리즘은 단일 출발점에서 다른 정점까지의 최단 경로를 찾는 데 사용됩니다.

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// 그래프의 정점을 나타내는 구조체
typedef struct {
    int dest;
    int weight;
} Edge;

// 그래프의 각 정점을 나타내는 구조체
typedef struct {
    Edge* edges;
    int num_edges;
} Vertex;

// 전체 그래프를 나타내는 구조체
typedef struct {
    Vertex* vertices;
    int num_vertices;
} Graph;

// 우선순위 큐의 노드를 나타내는 구조체
typedef struct {
    int vertex;
    int distance;
} PQNode;

// 우선순위 큐의 노드 비교 함수
int compareNodes(const void* a, const void* b) {
    return ((PQNode*)a)->distance - ((PQNode*)b)->distance;
}

// 우선순위 큐 구조체
typedef struct {
    PQNode* nodes;
    int size;
    int capacity;
} PriorityQueue;

// 그래프 생성 함수
Graph createGraph(int num_vertices) {
    Graph graph;
    graph.num_vertices = num_vertices;
    graph.vertices = (Vertex*)malloc(num_vertices * sizeof(Vertex));

    for (int i = 0; i < num_vertices; ++i) {
        graph.vertices[i].edges = NULL;
        graph.vertices[i].num_edges = 0;
    }

    return graph;
}

// 그래프에 간선 추가 함수
void addEdge(Graph* graph, int src, int dest, int weight) {
    Edge edge = {dest, weight};
    graph->vertices[src].edges = (Edge*)realloc(graph->vertices[src].edges, (graph->vertices[src].num_edges + 1) * sizeof(Edge));
    graph->vertices[src].edges[graph->vertices[src].num_edges++] = edge;
}

// 우선순위 큐 생성 함수
PriorityQueue createPriorityQueue(int capacity) {
    PriorityQueue pq;
    pq.nodes = (PQNode*)malloc(capacity * sizeof(PQNode));
    pq.size = 0;
    pq.capacity = capacity;

    return pq;
}

// 우선순위 큐에 노드 삽입 함수
void enqueue(PriorityQueue* pq, int vertex, int distance) {
    if (pq->size == pq->capacity) {
        pq->capacity *= 2;
        pq->nodes = (PQNode*)realloc(pq->nodes, pq->capacity * sizeof(PQNode));
    }

    pq->nodes[pq->size].vertex = vertex;
    pq->nodes[pq->size].distance = distance;
    ++pq->size;

    qsort(pq->nodes, pq->size, sizeof(PQNode), compareNodes);
}

// 우선순위 큐에서 노드 추출 함수
PQNode dequeue(PriorityQueue* pq) {
    PQNode node = pq->nodes[0];

    for (int i = 1; i < pq->size; ++i) {
        pq->nodes[i - 1] = pq->nodes[i];
    }

    --pq->size;

    return node;
}

// Dijkstra 알고리즘 함수
void dijkstra(Graph* graph, int start) {
    int* distances = (int*)malloc(graph->num_vertices * sizeof(int));
    PriorityQueue pq = createPriorityQueue(graph->num_vertices);

    for (int i = 0; i < graph->num_vertices; ++i) {
        distances[i] = INT_MAX;
    }

    distances[start] = 0;
    enqueue(&pq, start, 0);

    while (pq.size > 0) {
        PQNode current = dequeue(&pq);

        for (int i = 0; i < graph->vertices[current.vertex].num_edges; ++i) {
            Edge edge = graph->vertices[current.vertex].edges[i];
            int new_distance = distances[current.vertex] + edge.weight;

            if (new_distance < distances[edge.dest]) {
                distances[edge.dest] = new_distance;
                enqueue(&pq, edge.dest, new_distance);
            }
        }
    }

    // 결과 출력
    printf("출발점 %d에서 각 정점까지의 최단 거리:\n", start);
    for (int i = 0; i < graph->num_vertices; ++i) {
        if (distances[i] == INT_MAX) {
            printf("%d: 도달 불가능\n", i);
        } else {
            printf("%d: %d\n", i, distances[i]);
        }
    }

    free(distances);
    free(pq.nodes);
}

// 메인 함수
int main(void) {
    int num_vertices, num_edges;
    printf("정점의 수를 입력하세요: ");
    scanf("%d", &num_vertices);

    Graph graph = createGraph(num_vertices);

    printf("간선의 수를 입력하세요: ");
    scanf("%d", &num_edges);

    for (int i = 0; i < num_edges; ++i) {
        int src, dest, weight;
        printf("간선 %d 정보를 입력하세요 (출발점 도착점 가중치): ", i + 1);
        scanf("%d %d %d", &src, &dest, &weight);
        addEdge(&graph, src, dest, weight);
    }

    int start_vertex;
    printf("출발점을 입력하세요: ");
    scanf("%d", &start_vertex);

    dijkstra(&graph, start_vertex);

    // 그래프 메모리 해제
    for (int i = 0; i < num_vertices; ++i) {
        free(graph.vertices[i].edges);
    }
    free(graph.vertices);

    return 0;
}
