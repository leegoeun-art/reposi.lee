#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include "ascii_art.h"

int main11(void)
{
    int pic_num, pic_height = 0, pic_width = 0;
    int steps_to_downwards, steps_to_rightwards;
    char* ascii_array = NULL;
    int y1 = 0, y2 = 0;      //여러 변수들을 선언합니다. pic_num, pic_height, pic_width는 그림의 번호와 높이, 너비를 저장하는 변수입니다. 
                                steps_to_downwards, steps_to_rightwards는 아래로 몇 줄, 오른쪽으로 몇 칸 이동할지를 저장하는 변수입니다. 
                                ascii_array는 선택한 그림의 ASCII 아트를 가리키는 포인터입니다. 
                                char* ascii_array = NULL;는 포인터 변수 ascii_array를 선언하고, 초기값으로 NULL을 할당하는 코드입니다
                                char*: 포인터 변수의 자료형을 나타냅니다. char 포인터는 문자열이나 문자 배열을 가리키는 데 사용됩니다.
                                ascii_array: 변수의 이름입니다. 이 변수는 ASCII 아트의 문자열을 가리킬 것입니다.
                                = NULL: 포인터 변수를 초기화합니다. NULL은 포인터 변수가 아무것도 가리키지 않도록 하는 값으로 사용됩니다.
                                y1과 y2는 반복문에서 사용되는 변수입니다.//

    while (1)
    {
        printf("그림 번호 선택(1.main, 2.flower, 3.castle, 기타: 종료): ");
        scanf("%d", &pic_num);    > 무한 루프를 실행하며 사용자에게 그림 번호를 선택하라고 입력을 받습니다. pic_num 변수에 사용자의 입력을 저장합니다.

        switch (pic_num) {
        case 1:
            ascii_array = ascii_main[0];
            pic_width = 46;
            pic_height = 9;
            break;

        case 2:
            ascii_array = ascii_flower[0];
            pic_width = 18;
            pic_height = 13;
            break;

        case 3:
            ascii_array = ascii_castle[0];
            pic_width = 57;
            pic_height = 20;
            break;

        default:
            printf("안녕히 가세요.\n");
            return 0;
           
        }
        printf("오른쪽으로 몇 칸 이동할까요? ");
        scanf("%d", &steps_to_rightwards);

        printf("아래로 몇 줄 이동할까요? ");
        scanf("%d", &steps_to_downwards);

        printf("선택한 그림을 해당 위치로부터 출력합니다.\n");
        for (int y1 = 0, y2 = 0; y1 < pic_height + steps_to_downwards; y1++)    
        
                          > int y1 = 0, y2 = 0;: y1과 y2를 각각 0으로 초기화합니다. 이는 반복문에 진입하기 전에 초기값을 설정하는 부분입니다.
                                y1 < pic_height + steps_to_downwards;: 반복문의 조건을 나타내며, y1이 pic_height + steps_to_downwards보다 작을 때까지 반복합니다.
                                y1++: 각 반복이 끝날 때마다 y1을 1씩 증가시킵니다.
        {
            if (y1 >= steps_to_downwards)
            {
                for (int x = 0; x < steps_to_rightwards; x++)       
                    printf(" ");

                /*for (int x=0; x<pic_width; x++)
                  printf("%c", *(ascii_array +(y2 * pic_width)+x));
                printf("\n");*/

                printf("%s\n", ascii_array + (y2 * pic_width));
                y2++;
            }
            else printf("\n");
        }
        return 0;
    }
}
여러 변수들을 선언합니다. pic_num, pic_height, pic_width는 그림의 번호와 높이, 너비를 저장하는 변수입니다. 
steps_to_downwards, steps_to_rightwards는 아래로 몇 줄, 오른쪽으로 몇 칸 이동할지를 저장하는 변수입니다. 
ascii_array는 선택한 그림의 ASCII 아트를 가리키는 포인터입니다. 
y1과 y2는 반복문에서 사용되는 변수입니다.






하트모양의 아스키 코드 출력.

#include <stdio.h>

int main(void) {
    printf("   ***   ***\n");
    printf(" ***** *****\n");
    printf("*************\n");
    printf(" ***********\n");
    printf("  *********\n");
    printf("   *******\n");
    printf("    *****\n");
    printf("     ***\n");
    printf("      *\n");

    return 0;
}

로켓

#include <stdio.h>

int main(void) {
    printf("       _\n");
    printf("     /^\\\n");
    printf("    /   \\\n");
    printf("   /_____\\\n");
    printf("   |  |  |\n");
    printf("   |  |  |\n");
    printf("   |__|__|\n");
    printf("  /       \\\n");
    printf(" /         \\\n");
    printf("/___________\\\n");
    printf("|    |    |\n");
    printf("|____|____|\n");

    return 0;
}

사용자로부터 입력을 받아 원하는 크기와 너비로 별 모양을 출력하는 C 프로그램의 예제입니다. 
사용자에게 원하는 행 수와 각 행의 별 개수를 입력받아 해당 크기의 삼각형을 출력합니다.
#include <stdio.h>

int main(void) {
    int rows, width;

    // 사용자로부터 행 수 입력 받기
    printf("삼각형의 행 수를 입력하세요: ");
    scanf("%d", &rows);

    // 사용자로부터 각 행의 별 개수 입력 받기
    printf("각 행의 별 개수를 입력하세요: ");
    scanf("%d", &width);

    // 별 모양 출력
    for (int i = 1; i <= rows; i++) {
        for (int j = 1; j <= width; j++) {
            printf("*");
        }
        printf("\n");
        width++;
    }

    return 0;
}

[random]
물론이죠! 다음은 좀 더 어렵고 복잡한 문제 예시입니다. 이 문제는 좀 더 고급 프로그래밍 기술이 필요한 그래픽 효과를 구현하는 데 초점을 맞추었습니다.

문제: ASCII 아트 애니메이션
주어진 C 코드에서 ASCII 아트를 선택한 위치로부터 이동하여 출력하는 프로그램을 더 발전시켜, 아트가 움직이는 애니메이션 효과를 구현하세요. 다음과 같은 요구사항을 만족시켜야 합니다:

선택한 ASCII 아트가 주어진 방향과 속도로 이동하며, 이동한 후 화면에 출력되어야 합니다.
프로그램은 일정한 주기로 반복하여 애니메이션 효과를 제공해야 합니다.
사용자는 애니메이션을 중지하거나 다른 아트를 선택하여 새로운 애니메이션을 시작할 수 있어야 합니다.
사용자 입력 및 동작에 대한 적절한 오류 처리를 구현하세요.
추가 기능:
사용자에게 이동 방향과 속도를 입력 받아야 합니다.
애니메이션을 중지하고 새로운 아트를 선택하거나 프로그램을 종료할 수 있는 옵션을 제공하세요.
사용자 정의 아트를 추가하고, 선택할 수 있도록 하세요.
이러한 추가된 조건을 충족시키면서 프로그램을 개선하세요. 이 문제는 프로그래밍 논리와 사용자 상호작용에 대한 고급 이해를 요구합니다.

[자연수 a,b 사이의 구간에 대해서 홀수는 더하고
짝수는 빼는 식을 보여준 후 결과를 출력하시오 ex) a=5,b=10인 경우, 5-6+7-8+9-10=-3]

def calculate_expression(a, b):
    result = 0
    for i in range(a, b + 1):
        result += (-1) ** (i + 1) * i
    return result

a = 5
b = 10
result = calculate_expression(a, b)
print(f"{a}-{b}까지의 결과: {result}")

